//! <https://adventofcode.com/2021/day/10>

use lazy_static::lazy_static;
use std::collections::HashMap;

const INPUT: [&str; 102] = [
    "((((<([<{(<(<[<><>>[{}()]>{{()[]}<[][]>}){{(()<>)(<>())}}>{<(([]())({}<>))[<{}()>{{}{}}]>}){{<",
    "<{<[([{<{{<{[({}())[<>()]]([{}()]{{}[]})}{([[]]<{}[]>){<<>[]><<>[]>}}>}}{[{[{[[]{}]<[][]>>{[<",
    "[([<[(({(<[<[(<><>)([]())][((){})<<>[]>]>{([<>()]<<>[]>)({{}<>})}][{(<()()>{<><>}){[<>[]][<",
    "[<[[[{{<{{((<[[][]][[]<>]><({}[])>){{[<>()]{{}{}}}<(()())[<>[]]}}){[(({}{}))](<(<>)>{(<>())(<>[])})}}<<[<<<><",
    "{{{[{[[{{{{{<<{}<>>{{}[]}>[{<>()}<<>{}>]}<{<<>{}>{[]<>}}({<>()}<(){}>)>}[[(([]<>)<{}()>)]{{[<>{}](<><>)}{([",
    "{{<[([<[({(<{([][])[{}{}]>([{}<>](<><>))><[[<>{}]]<{<><>}{{}()}>>)<[[([]{})]([<>[]]({}[]))]({(",
    "({(([[<<([(([([]())<{}<>>](<()[]>[[]{}])){{{()[]}<<><>>}})<{((<><>)[()[]]]}>])><{<(([{()[]}])[{[{}<>]({",
    "{[<{(([{[([(<[(){}]<()[]>>[<{}<>>[[]<>]>)]{{({[]}({}()))<<{}<>>{<>{}}>}[({<>[]}[[]<>])([{}[]](<>[]))]})",
    "[({<({([<{<<({()()}<[]{}>)<<<>()>[<>()])>[(<{}<>>[[]()])<(()()){[]<>}>]>}[([<<{}<>>({}{})>[<[]<>><<>()",
    "[([(<[([<[([[((){})<()[]>]([{}[]](<>()))]){<[<<>()>(<>{})][[<><>]]>({([][]){<>[]}}[{{}}<()()>])}",
    "{{[[(([{{((<{[{}[]][{}()]}{((){})<()()>}>(<[{}{}]{()<>}>(<{}()>(()()))))){[[[<{}[]><[]<>>][[{}[]]{",
    "[{(<{<[<(<{({[()[]]([]<>)}[[<>()]{(){}}])}({{<{}<>><{}()>}{([]())[()<>]}}[(((){})<<>[]>)])><([[<()",
    "[{<[<{<(({<<{{{}<>}}{[[]()]}>>}[((<[<>][[]<>]>))(({[()<>]<<>()>}<{[][]}<[][]>>))>))>}><[<<<([{{([][])({}<>)",
    "<{([({[<{{{<(<[]()>[()<>])({<><>}[{}])}}<[(<[]<>>((){})){({}[])(<><>)}]<[[<>[]]<{}()>]>>}{[<<([",
    "<[{[[[{<{[<({[[]{}]{<>]}[[[]{}]<[]<>>])>]}{{{({<<>{}>(<><>)}[<{}[]>]){([[][]](<>{}))}}{<[(()())(<>(",
    "(<{(<[({<(<((<(){}>[{}<>])<{(){}}({}[])>)<{<{}[]>{()[]}}([()<>]<<>[]>)>){<<<{}()><{}[]>>{{[][]}}",
    "[((((<[(([[<{{()[]}{<>()}}{<[]{}>{<>[]}}>[[{<>{}}([]{})]]][([<()<>><{}{}>]<<[]()>{{}()}>)]](<{[[",
    "<(({<{[(([<[{(<>)<<>{}>}[(<>{}){{}<>}]]>(((([][])(<>{}))))](([{{<>()}(()[])}{<<>>}][([{}{}]",
    "[{({[[[[<{(<[{()}<[]<>>]{([])}>[(<()<>>({}<>))[({})]]){<<[[]]{<>{}}>{({}{})[<>()]}><{{()<>}({}[])",
    "[[([[{(((<{(({(){}}[[]{}])[{{}()}[{}()]])[<<{}[]>((){})>]}>{<<[<(){}>](<[]<>>{{}<>})>>}))[{{(({[<><>][",
    "{({{[{{<<<<<((<>())<[]<>>)<<()<>>({}[])>>>(<{[[]{}]{<>[]}}(<()<>>{[]<>})>({{[][]}([]())}{({}{})[[]",
    "(((<(([<[[{<{[[]<>][[]<>]}>{<<<>[]>>([[]()][{}()])}}]<{<{(()<>)[<>()>}[[{}[]]]>[<[<>[]]([]",
    "{[<[<[[<[[<([{{}{}}<[]()>](<{}<>>(()())))<[([]<>){[]<>}]<[<>{}]<[]{}>>>>[([([])[[]{}]]{<{}<>><[]<",
    "<({<[<{<[<{[(<{}()>)[[[][]]<<>{}>]]{[[()()]<[]<>>][<[]()>{{}[]}]}}[({<{}<>>})<[{{}()}{()<>}]{<[]<>>(",
    "({<[<<{<[[<{(<{}()><(){}>)<<[][]>{{}{}}>}[<[{}<>][<>[]]>({()()}<[][]>)]>]}({(<(<<>[]>[<>()])><",
    "[({((({[<{<{{[<>{}]({}{})}}><<({()[]}{(){}})([[][]]<<>[]>)>{<{()}(<>)>}>}><{<(<<{}>(()[])>)",
    "<{<([<{{[(<({<{}[]><[][]>}<{(){}}<[]>>)<<({}{})>[{(){}}<[]()>]>>{<{{[]<>)[[]()]}{(<>[])[()<>]}>[",
    "[<<{(<[{[{<{<[(){}]><{<>}<[]()>>}{<[<>{}](<>>>}>[[<{()()}[()[]]>{[{}()]<{}[]>}]]}]}]>{{<[<[<<{()[]}[[]()]>",
    "<(<{<[[{<<((<(<>[])(<>{})><[[][]]({}[])>))>(<{<<<>[]>{{}[]}>[({}<>)[()<>]]}>)>}]]>}{{(<<<[",
    "<[((([<{({({[({}<>}({}{})]<(()())[<>()]>}{{<()[]>}{<<>()>(<>{})}})[<[({}())(<>[])]<{{}()}>>",
    "[{(<[<((<(({<([]())({}[])>([<>()]{[][]})}){<[([]())({}[])]<<<>()>>>})>{<{<([[]{}][[]()])<(()<>)(<>{})>>}{<{{",
    "<{[[{({[{[<{(([]<>)<(){}>)<<<><>>[[]<>]>}>{({{()[]}(()[])}<[[]()]>){[([]<>)<[]{}>]}}](<<{[(){}]{<>}}{([]<>)(",
    "<{(<<[<[[<[[[{()[]}[<>{}]](<<>{}><[][]>)]{(([]){[][]})<<()<>>>}]>[<[({(){}]){<{}{}>([][])}]>(({[<>[]",
    "<{[<<({[(<({([()][{}()])}([{{}{}}([]<>)]{{{}}<{}()>})){<{{{}}(()[])}([[]<>]{()[]})><<(<>[]",
    "{({[{[(<<[<{[<<>()>[[]<>>](<<>()>[<>()])}<<[()[]]<<>{}>>{{(){}}[[][]]}>>]>>[(({({([]{})<<>{}>}<{()[]}{[]{}}",
    "([(({[{<{{[<{<{}{}>(<>{})}>([<{}[]><<><>>]{(()<>){<><>}})]}[([<[()[]]{<><>}><{[]}{{}[])>]([({}<>)<()<>>]))",
    "{<<<[([(<<<{<{{}[]}{<>()}><<{}()><(){}>>}>[<<[<><>]<()()>><<(){}>{[]<>}>)(<{(){}}({}{})>{[",
    "(({({[<[(([[(({}[]){<>()})]]<([([]())<{}[]>]){{{{}[]}{<>()}}([[][]](<>{}))}>)[<[{<{}()>{{}<>}}]<<",
    "{{(({{<((<<({[(){}]<[]()>}(<{}()>[<>()]))[{{{}<>}[<>()]}[{[]}{()()}]]>][(<<<[]<>>{{}()}>(<{}{}>{<>{",
    "({([{<{{{[{({{[]()}<[]{}>})[{<<>()>{[]}}<({}{})({}<>)>]}<{[[[]<>][{}()]][[()<>]([]<>)]}({[<>[]]<{}<>>}<",
    "[[(<[[({<[{({<{}()>[()[]]}{{[]()}{[][]}})[(({}<>)<<><>>)[([]<>)<{}[]>]]}]>>[{<<(<[[]<>](()[])>[<{}><[]()>",
    "(<<<<[{<{({<(<{}<>>)>{({[]{}}<<>{}>)<[{}<>]<[]()>>}}){{{{([]<>){(){}}}[{[]<>}[[]{})]}[({(){}",
    "({[{{[{[[<([[<{}()>[[][]]]{((){}){()<>}}](([{}[]][[][]])[([]())]))>]]{<<<<([{}[]])<([])[{}{}",
    "({(((({{{[[[[{<><>}]<[<><>][(){}]>]{{(<>()){<>[]}}{<()<>>{<>}}}]]}}<[<<((<{}<>><<>[]>){<<><>>{()",
    "{{<<{{[<<[[<[<{}>[{}<>]]<<<><>>([]())>>(<(<>())(<>{})>(({}{})(<><>)))]<{{{[]{}}[<>{}]}(<(){}>[()()]",
    "[<(<<{(([{{(((()()){<>()}){[[]()]})((<{}()>[<><>])[({}[])([]<>)])}{([(<>[])<{}<>>]{[()()][{}()]}){[{<>()}<<>",
    "(<{(<<{[({{([[[]<>][[][]]][<<>()>[[][]]])}[<<([]())<()()>>{[{}()]<[]()>}><({{}[]}{<>()})>]})[{[[([{}]<{",
    "<<[[(((({<({{([][]){<>()}}}<{(()())<{}()>}{[[][]]<<>()>}>)>})[{{<{[{<><>}[(){}]]((()[])(<><>))}>([<",
    "<([<{<{{[[[{<{{}<>}<{}]>({<>{}}[{}<>])}(((<>())<[]()>)((()<>){{}[]}))]<{[[<>][<>{}]][([]())]}([[()<>]{(",
    "{<((<[[{{([<[[()[]]]<{[]{}}{{}}>>(<(()<>)<[]<>>>[<<>()>[{}<>]])]){([[<[]{}>([]())][{()<>}]]<{<",
    "((([[<(<<(<({{()[]}{[][]}}{<[]()>[{}()]})[(<<>()>([]<>))<[<>{}]>]>)<<[<[[]<>]>{(()[]){()<>}}]{(",
    "(<({<{<{[([{{<<>{}>(()[])}}[(({}())([][]))[{{}{}}([]<>)]]](<([[]{}]([]{}))([<><>](()<>))>{[({}{})[()()]][",
    "{<{{{{{(<{((({{}}[[][]]){([]{}>})<{{()()}[{}<>]}([(){}])>)<<([<>[]]<<>>)[(()<>)([])]><{<()<>>}(<<><",
    "{{<[{([{{<{([<[]<>>[<>{}]][({}()><<>()>])[<[()[]](()())><[[]]<[]()>>]}{[([<>[]])[<[]{}>]]{{(<><>){{}<>}}(",
    "[(<({<[{<({[[{[]<>}[[][]]]<{[]()}<[]()>>]<[[[][]]{[]<>}][<[]<>>{[]()}]>}[<<(<>{})[{}{}]>[{{}()}[()()]]><[(",
    "<([[<(({<{[{{<()[]><{}()>}{{{}<>}}}([{{}[]}<{}<>>]{<[]<>>({}[])})]}>((([{<[]<>>{<>[])}(<<>[]",
    "({{<[[([{<{{<[<>{}](()<>)><(()())>}[[<{}[]><<>()}]<{()<>}[()()]>]}>{<<([<>()]([]{}))((<>())[[][]])>",
    "([((([[[{{<((<<><>>{[]})<(<><>)<()<>>>){([[]{}][[][]])<<{}<>>{{}<>}>}>{<<[(){}][()()]>[<[]()><",
    "[<<[[({<<[[<<<()<>>[()[]]><(()())>>(((()[])[(){}])((<>[]){{}[]>))]<<{[[]()][()]}>{(<{}<>>(<><>))<[<>()][",
    "{{{[([(({{{(([{}[]](()<>))({{}{}})){[({}())(<>[])]}}{<(([][])[<>()])([(){}][{}[]])>[[[[]()]]({<>()}<<>>)]}",
    "{<(<(([<[<<[[({}[])<<><>>]]({<[]()>}({[]()}<[]()>))><<(((){})(<>[]))>({{<>[]}({}<>)}{<{}()>(()())})>>([<{{",
    "[<{[[<[({{{<{{[]{}}<[]{}>}{<<><>>}>}[{[([][])<{}()>]({[]<>}[()()])}[([{}[]][[]<>])]]}}<<{[([{}(",
    "{[([(<{{{([{<[<><>]<<>{}>>[<{}[]>[[]<>]]}])<({[<[][]><[]<>>][<<><>><{}()>]})>}(<{<[(()[])<()",
    "{((((<{[[[{([(()[])[<>()]]){[{{}()}]}}{{{({}[]){[][]}}[<[]()>]}}]]{[[<({<><>}(<>[]))[({}{})<()()>]>]{{[",
    "[(({[[<<{<[[(({}{}){{}{}}>[[[][]]<{}<>>]][{{<>()}{[][]}}]]>[[[<<{}[]>>[[<>[]][<>{}]]]{{{{}(",
    "[([[[[{((<([{[{}{}]([]())}{[()()][{}<>]}])<({{{}{}}<()()>}<([]{})[(){}]>)<({{}{}}<<>[]>)<[<><>][(){}]>>>>[[",
    "[{{<[{<((([{{<[][]>{<>[]}}({<><>}<<><>>)}<<<{}{}>{[]{}}>{[[]<>]({})}>][<<{{}}(<>())>{{[][]}<[]>}>",
    "[(([({<(<{[{<{<>{}}><[()()]<()[]>>}{((()())<<><>>)[<{}<>>[<>()]]}]}{{{(<{}{}><<>[]>){{{}}[(){}]}}}{[<{[]{}}>{",
    "{[[{<[(<<[({({{}{}}[{}<>])[(<>{})<<><>>]}(([{}{}](()()))(<[]>[<>[]])))<({<[]()>}[[<><>]<()",
    "<[({({<[((<[<({}<>)({}())>]>[({{[]}<{}()>})((<[][]>((){}))[<(){}><()()>])])([[([{}{}]<(){}>)](<<{}[]>{{}<>}>)",
    "<<<[<{[[<{[<<([]<>}[{}{}]>>{[(()()){()<>}][<<>{}>{{}{}}]}][[<[[]<>]{<>}><{[]<>}{{}{}}>]<[{()",
    "([({{[({{{({<[[]]<{}[]>>}{{<[]()]<<><>>}{[()<>]([]())}}){{[<<><>><<>{}>]<(<><>)([]{})>}}}(",
    "{[[[({{({[((<[[])(<>{})>{[[]<>]<()>})[[<[]<>>[()()]][{[]<>}<<>[]>]])[<{<{}{}>([]())}{[<>{}]}>]]}[((<",
    "[<(<<<{{((<<({[]{}}([]{})><({}{})>><({<>{}}<()[]>)({[]()}[{}()])>>(([[()[]]<<>[]>](<<>()>({}<>)))<<([",
    "{[[{{<<[[[[[([()()}(<>[]))]((<<><>>[[]{}])(<{}[]>[{}()]))]{<{{{}<>}}({<>()}{()()})>{{<{}()><{}<>>}}}]]<({<",
    "<<<[[{(<{({([{<><>}<[][]>]<([]())[{}]>)})<<[<{[]()}({}{})>](<{{}[]}[()[]]>(<[]<>><<>()>)))>}",
    "([([((([(<({<[[]<>][()()]>})[[<<<>><<>[]>>({()()}([][]))][<({}[])<<>[]>>{{{}()}{[]{}}}]]><<[<{(){",
    "{[([{{<{{[{{{<<>{}>}}<[(())(<>{})]{({}<>)[{}[]>}>}{<([[]()]([][]))[[<>[]]<()[]>]>}]({{{[[]{}]{{}()}}}}([[",
    "{[<[(<<<[<{([(<>[])<{}()>]{[[]{}]<[]<>>})}>]{{[(<{<><>}[{}()]>{[[]{}][{}{}]}){[([]<>)({}())]{{(){}}({",
    "((({<{<[[[({<[[]()]{()()}><[<>()][{}[]]>}<(<{}[]>)((<><>)<{}{}>)>)]]{((<<[{}{}][[]()]>(([]<>)[[]{}])><[{[",
    "{<[<<([<<<{([{<>[]}[()[]]]([{}<>]<[]<>>))<[{<>[]}[{}]]>}[[<[<><>](<>{})>{[()<>)[{}()]}](<((){})([]<>)>)]>",
    "{[((<[<((<<<{{{}<>}(<>[])}({<><>}(<>{}))>[[<(){}>((){})]((()[]){<>()})]>[<{[[]{}][{}()]}({(){}}<{}",
    "[{[<{<(([[([(<[]()>((){}))[([]{})[<>{}]]]{<{{}()}(<>{})>})<{(<{}{}>((){}))<{<>[]}<<>()>>}>]({<([{}<>]{<>(",
    "<{(<([<<{([<{([]{})<[]()>}<{[][]}({}[])>>{(<<>{}>){[()[]]<()()>}}]<[<(<>())><{()()}[()<>]>]>){<{[<(){}><",
    "(<([([<{<{[<(({}[])((){}))[[{}()](<>())]>][[{[[]()]<()()>]]<<{[]()}>{[{}<>]<[]()>}>]}<<([{{}<>}<()",
    "[({(({[[[[({{[{}{}]}{(()())[<>[]]}}<{<<>()>(<>[])}(([]){<>{}})>)<<{{[]}[<>()]}{{<>[]}<[]()>})>]]]]})[<[",
    "<((([[{({(<[<{{}<>>[[]()]><<[][]>[{}()]>][<<{}[]><{}<>>>{[{}()]{<>{}}}]><[{<(){}>{()()}}<(<>{",
    "[{<{(<{[((<{<{{}[]}({}{})>{({}[])[<>[]]}}{({[]()}){[{}()]<()>}}><<([[]]{<><>}){[[]()](<>{})}>{(<(){}>{[]",
    "<<([{(<<(([{[{<><>}<{}<>>][[()<>]]}([(()[])[[]()]}<<<>{}>{(){}}>)])[(<<{()()}><[()[]]{<>()}>><(([]{})",
    "[(<([<{<{{((<((){})<[]{}>>({()[]}({}<>))))}([<[(<>())[{}[]]]((<>[])[{}[]])>[[[(){}]{<>{}}]]])}[{({(<()()){{}",
    "{({<(<(<{{(({{<>[]}{<>[]}}[{{}}<<>>]))<<[<()[]><()[]>]<({}{})<<>[]>>>{[[[]())<[]()>]}>}{{{(<[]<>><",
    "{[{{[(<[[[({[{[]()}[[]]]<<<>[]><()()>>})][[(([<>{}]{{}()}){<{}<>>{[]<>}})[{({}<>)}]]<<{(<><>)<{}()>}<(<>())<<",
    "<{<{{[<[<{<(([[]{}])[[{}{}]{()[]}])<<{()()}{()<>)>>>}<[<[[{}{}][()[]]]<<[]()>(<>[])>>[(([])",
    "(([{([<<{{((({()()}[()<>])({<><>}))<<{[][]}[{}()]>{([]{})}>)}}(<<{(<[]()>{[]()})((()()){<><",
    "[[{<{{{{<(<{{{()[]}{{}[]}}}><<<<{}[]>{{}()}><[{}<>](()[])>>{{({}()><(){}>}<{[]()}[{}]>}>)>[[[{[[{}<>]<()()>][",
    "[(<<{[{([{[[[{(){}}]<[[][]][<>[]]>]<[<()[]>(()<>)]<<[]()>{[]<>}>>]<<{<{}{}>{{}<>}}{<<><>>[{}<>]}>[",
    "<[{[({[[[[([([[]<>]<<>{}>)(<{}[]>[<><>])]{[[[]<>}{<><>}]{(()())[()[]]}}){<(<()[]><{}{}>)>{((<><>)[<><>]){{<>",
    "{([((<{[<({{(<[]>({}{})]{[<>{}]<{}()>}}{([<>{}]<(){}>)[[<>{}](())]}})>[{{<[<<>[]>({}[])]<<{}{}>{",
    "[<<{([{{{([(<[<>[]][()<>]>(<[]()><<>[]>))(((()()){{}()})<<<>{}>[()<>]>)][{({[]{}}(<><>))[{(){}]]}{<([]<>)",
    "{[<(([[[{{[{<(<><>)<<>{}>>}]{<{<<><>>}>{[{[]()}[<><>]]([()()][()()])}}}<[{(<()<>>{{}<>})}]{{[<()>{{}[]}]{{{}",
    "[<[{({{{[<[({<<>{}>{{}{}}})<((<>{}))[{(){}}]>]><((<{[]()}>[([][])]))[[(<()()><{}{}>)[[{}<>]<<>{}}]]{[[<><>",
    "([{<(([(((<{({()[]}{[]<>})[{[]{}}]}>(<{<()[]>}(([]{})[[]])>)){{{({{}()})(<<>()><[]<>>)}<[{[]{}}]<(()[]>([](",
];

lazy_static! {
    static ref CLOSING_PAREN_FOR_OPENING_PAREN: HashMap<char, char> =
        HashMap::from([('(', ')'), ('[', ']'), ('{', '}'), ('<', '>'),]);
    static ref SYNTAX_ERROR_SCORE_PER_ILLEGAL_CHAR: HashMap<char, u32> =
        HashMap::from([(')', 3), (']', 57), ('}', 1197), ('>', 25137),]);
}

fn is_opening_paren(char: char) -> bool {
    CLOSING_PAREN_FOR_OPENING_PAREN.contains_key(&char)
}

fn first_incorrect_closing_char(line: &str) -> Option<char> {
    let mut open_parens: Vec<char> = Vec::new();
    for char in line.chars() {
        if is_opening_paren(char) {
            open_parens.push(char)
        } else {
            // XXX It is safe to call open_parens.pop().unwrap() here, because of guarantees on the
            //     input - there will never be missing opening parentheses, only missing closing
            //     parentheses ("Some lines are incomplete, (...) others are corrupted").
            let expected_closing_paren =
                CLOSING_PAREN_FOR_OPENING_PAREN[&open_parens.pop().unwrap()];
            if char != expected_closing_paren {
                return Some(char);
            }
        }
    }
    None
}

pub fn solution_1() -> String {
    let mut total_syntax_error_score = 0;
    for line in INPUT {
        if let Some(first_illegal_char) = first_incorrect_closing_char(line) {
            total_syntax_error_score += SYNTAX_ERROR_SCORE_PER_ILLEGAL_CHAR[&first_illegal_char];
        }
    }
    total_syntax_error_score.to_string()
}

pub fn solution_2() -> String {
    "TODO".to_string()
}
