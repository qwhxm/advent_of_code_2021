//! <https://adventofcode.com/2021/day/20>

use simple_grid::{Grid, GridIndex};

const INPUT_ALGORITHM: &str

const INPUT_IMAGE: [&str; 100] = [
    "#.#.#.###...#####.#.###...#.#..##.#.#..#.#.#####.##......##..#.....#.#..#.##.#..##.##.#.#.#.##...#..",
    ".#.##..#.##.#..#...##..##....##....###.##.#..##..............#####.#.###..#..####....##.##.#.#....#.",
    ".##.##.###.##.#...#.#..#.###.##.####..#....#.#.####..##.####.###....##..###.#.#.....#..##.##.##.#...",
    "..#.##.####.####..##..####.##.###..#.#..#..##.#..#..####.#.....####.#..#####...###.##...#.##...###..",
    "###..##.#.#######.##....#.#.###..###..#..#####..#....##.##.###....#..#####.#..##.#...######.##..#.#.",
    "....#.#.##..##.####..###..#####.#.#.##....#..#...##########..##.#...#..#.##.#####.#.###..#.#..######",
    ".#....#.........##...#####.##.......#.###.#.###..###.#..##.###...####...........#..######...##..####",
    "...#.#..###.###.#.#.##.#.###.#.######.#####.#...#.#...##..###.##.####.###..#..#.####.####..#.##.#.##",
    ".#.#..####..#.#.#.##.......##..#..##..#..#.#.#..##..#..##.#.#.##..###....###.###.###..#....#.#..#.##",
    "#......###.##.#..###.#.#.###.#...#..#.#.##.##...##..####..##.###..#...######...####..##.#####......#",
    ".#...###.#.##.##...##......##..#.....###.###.#.#.####.###...#...#...#.##..#.##.###.#.#..#.....#####.",
    ".##..#..#.#..#..#.##..#..###..##.##....#.#....#.####.##.###.#...###.#..###..###..#......##..#...##.#",
    "..##..#..#..#..##.##...###.#.##.....#..###..##...##......#.#.#..#..#..#.#...#...#.........#.##.#...#",
    "#.###.#..##..##...#.#...#......###.....##.######..#....#...##.###..#..####...##......#.##...##.##.#.",
    "####....#.#..##.#.#.....##.##.#....#.##...###.#.#.#..##...#####.##.#.......##.#..#.##.....###.#.#..#",
    "...#.#...#.......#.##.#...#####...##.##.#....###.......##...#.##.#.##...#.#.....#.#####.###.#####.#.",
    ".###..#..##..####.##.#.###.###.###..#...###.#######...#...#.###..###..#..###.....##..#.###......##..",
    ".#####.##.#..##....#.########..####.##...###..#.###..#..#.#####...#...##.#.##.#.....##.#..#####...##",
    "...###......##.#.#.##...#....#.##..#.##.##..##.#.#.#####....#..##....##..##.#.##.....#..#.#..####..#",
    ".#..###....#....##.#..#.##...#.#..#.#####.###.#.#..#.#..#.##.#....##.#.##...#####.#####...#...##.#..",
    "#.#.#...#....#.#..#.##.#....#.#.###..##.##..#.#.#.....######.....#.#..#.###.#..##.##.#.###..#.###...",
    "..#.#.#.#......###..##.#.##.##.###...###..#..####...#.#.##.###.#..#.#.#...##..##..##..#..####.##..##",
    "...#.#.#...#..######.##.##.##...#..#..#..#..##.###.#....#..##..##.##.#......###.#.#..#....#.#...#...",
    "...#.##...#.....###...#.##.###...####.#####....##.#....##.#...#.#..##..##.#..#####.......##.#...#.#.",
    "##.#.#######.###...#.####..#..###.#.#..#.#.#.###..##.#.##.....#####..##.#...##...#....###.#.#...##..",
    "##.#....##.##.#.###.......##..#.##..#.#......#..#.##.#..##.###..##...#...###...#..##.###...###....##",
    "...#..#..#...##...#.###.#######.#.#....#..#.#####.#...#####....###.######....#.#..#.....##.#..##.##.",
    "...#.##########..#.##..###....##.....####.##..###..#.#.####..###.###...###..##...#.#.###...#...#.#.#",
    ".#...#.#.....#.##.#.#.##...#....#.....#.#.....#...##..##.#.##..#....#.##.#######.##.##....#...#..###",
    ".#..#....#.#...##.##.##...#.#..##.##..#...#.###..#.##.###.#...###....####..#.##..####.#.#..#########",
    "#.###.#..#####.##...##.##...#.#####...#..###....#.#..#..#.##..##.#..######..##.######.#..#.###..####",
    "##..#.##.##..#.....#...#...#####.##...##.#.##.####..#.###.##.#.....##..#....#.#..###.#.##.#.#.###...",
    "#.##..#.#.....#..#.##.###..###...##..#.#........##.###.#.........###.....#..#.##.##...###...#..###.#",
    "#.....##.#.....#.#..###..#.#...#..#..###.#......###..#.######..#...##.#.#...#.#.#.#..##.##...##.##..",
    "###...#....#..####.#..###..#.#.#..##.###..##.####...##.#..###.#.####.#..#....##...#.#...###..###..#.",
    "..##..#..#...##.....##..#.##.##..#.#.####.##.###.#.#####......#.#..##.#...##.#.#.####..###....##...#",
    "..##.#....#.####.....#.#.##....###..##..##..##....#...##...#.#.#.########...####....#..#.#.###.#.#..",
    "###.#.##.###......####....##.##.#...###.#.....#....###.##.#######.##.####.##.#.###.####..#......#..#",
    "...#..#..#.#....#.####...##.#..##.#####.###.#..#.##....#.##.#..####.#.#...######..###.#.######.##.#.",
    "####.#....#....#...###....#.#.#.##.#..##.#.####..##..#...#......#######.#.#.#.##..#.....#..##.......",
    "..##.#.#...#.##...#..#..##.#.##.......#.##.####..#.#.....#..#.....###.##.#.#...###..#..#...#.#.##.##",
    ".#.########..####.#.###...##...#........#.####.####.#.#####.###..#####...##.##..#..#.#......#...###.",
    ".#...#.###.#.#...#.#.#..####.##.#.####..#..#.##.....#####..#######.##....##...###..####.#.#####.....",
    "###.#.######.#.#.#..#.#....##.....#...###.####.#.#..#.....##.##.###.#.####.....##.#....#...##..#.#..",
    "##...#.....##.####.###.#.#.#.##.#.#.##.####....#.######....#....##......#....#..#.#..####.#.#.##.##.",
    "..#.##.##...#.#.....#.##.##.######.####..#...#..###.##..##...#.####.##....##..#.###.#.####.###.#...#",
    "#.##.##.##...#.....##.#.##.#.#####.#.#.....#..##...#.####...######..#....#.#.##..###.############..#",
    "#.##.###...#..#.#.....####..#..#.#..#.#########...#..##.#.#...#...#.#.#...#...#.#..##.#.#..####.#..#",
    ".##.##.##......##.#..###.#.##.####..#..##...###...##....#.##..#####.#.#.#...#.#.#..###..###..###..#.",
    ".##.#####..#.#.#.####.#.#.##.##.....######.#..###..#####..##....#.#.#.##.##.#...#.#.#.#.####.##.##..",
    "...#....#.##...#####.#.###.####...##.#...##.#.#..#.#...####......#####.#.##.#..#####.#...#..#...#...",
    "#..#.##...#.#..#.###.#.#.#...#.##.##..#.##...###.######..#.##..###..#.#.###.##.#.###.....#..#.#..###",
    ".###.#........##..##......##.#######.#.#..###...#..#.##..####.#.####..###...#..##.###.##.###.#...#..",
    "###.###..##..##.#..#.##....#####.##.#....#..###..#..#.#...#.#.#......#.##..#####...###..##.#.....###",
    "##.#..###...#.#..###.....###.###.#.#..#...#.#...###..#.....########.##......#...##..#.#.#.#..#.#.##.",
    "#..##.#.#.##.####..##.###..#...#..#..###..##...#..#......#.#....##......####.#.###...##..###...#...#",
    "..#..##..####..###..#####.#.#.##.##.##....##.#.#.##...#......#...#..###....####..#.##..#.###....#.##",
    "###..#######...#...######.#######.##..##..###.....##..#...#..##..#######.....#..##..##..##..#.####..",
    "..#.###.#.##...#.#.##.#.#.###..##.....###.###.#..####.#...##..##...#..#.###.##.##.####....#...##....",
    "##.#.#...##.....#.#.#.##..##..####....#.#...#.#.#.#..#..###..###.#.#.###..#.###..#..###...##.......#",
    "###...##..#.#.####..#..#...##..#..#.#.#.#...###.##.###.###.#####.#.....####..#####.###.##..###..#...",
    "..###.#####.##...#.####....#.#...##...##....###......###...#.#.#.......###..#..#...#####.#..########",
    "#.####....#.#.#.#.#.#.#..#.##...#.#.###.#.##.##..#..#.###.##.##....##.###...#..##.#.....##.###.##.#.",
    ".#.#.##..#.#.##...##.####.#...#.#..##.#..##.#.##..##..#.####.##.#...##..###.###..###..#.#....###.##.",
    "####.#...#....####.###.####...##.....#######.....###....##.#........#.###.....#.#.#.###.####.##.#.##",
    ".#..#..#..####.#.##..##...###..###.###...######.###....##...#.##..#####.#.####.......#...#.##.#.....",
    ".#..#....#...#####..#..#...#..#...##.#.##.#.##.#...#.##..##.####..#.###.###.#..##.###.......###.#...",
    ".##.##.#..#...###.####.#.###.#...#..#.##.#..##.#.#.##..####.#####....##.###.###....#....#..##.###..#",
    "..#..#..##.###...#.###.#.###...###....##.##.#.#..#..#.##.#.#.....#####..#.##.###.#.....#..#.#.######",
    "#...##..###.###.#..#....#..#.##..##.###..#.#.#..##...#.##..#..#.#####.......#.##......##.#.#..#..#..",
    ".#....####.##.###.##....#...###.#..#####.#..#..##....####.#...####.#..###...#....#.#..####..##....##",
    "##..#####..#..#..#.#####.#.###..#....#..##.#...#.###..#..#####....##..##.#......##.###..#.#...#.###.",
    "##.......#..##.#.#.##.#...#.########.#.#.##..##.#..###.....#.#..###...##..#......##.##.##......#..##",
    ".##...##.#.#.....#.#.#.#....###..#..##...#.#.#.##.####.##.##.##.....##.#.....#.#.##..#.#.####.#..##.",
    "..#..#....###.....#.###...###.###...##....##.#.#.##....#..######...#.##.#.#...##.#....##########.###",
    ".....#.#.#.##.#.#.....#..#.#.#..####.##.#...#.#.....#####.###.#...#...#....###.#.......#.#..#...##..",
    ".##..###.#....#..#.##.#.#.#..#..#.##.....#####..##.....##.##....#...#..##..#..#.....###..#...##.#..#",
    "#.#.#..#.#...#.#.#.#...#..#.#.###.#.....#...#...#.###..######.#..###..####..####...##..#.....#.####.",
    "#..##........#.#.##.#.##.#.#####..#....#####.####...#....#.#..####.#..###.#.###..##..#....##.#...#.#",
    "..#....#....#....#.#.####......#.##...###..###.#.#..#.#.#.###..#.#.###.....#..###..##..#.##..#.#..##",
    "#...#..#.###.#....#.#.#.#..#.####..#####..###.....##..#.###..#.##.#####.#.#....###.###..#.##.###..#.",
    "#####.###.#.#.####..#.###.##..#.#.#..#........#########.##.#.#.#..##.#...#..#...#.##....#..##.##.#.#",
    "#.##.....#.##.#..##.....####.##..#..#...#.#..#.#######..#.##.#..#.##...###.###....###..#.##.##.####.",
    ".#....##########..#.#..###..#.#.#.#...#..#.#..###..##....######.###....#...##...#...#..###.#.#...###",
    "#.#.#..#.##.....##..####.###.#.###.#..#....#.#...#..##.#.#.##...#..#.......#...#.....##.##.##...#...",
    "#....#...#..##..............##.###.#.#####.##..#########..#.#..##.###..##.##..#.##.##..##..#...###.#",
    "##...#.####...##.....##.##....##.######.##.#.##.####..##..#####..#..#.#.###.....#..##..#.#...####...",
    "#..#.####.#....##..#.###.##.#.#.#.#...##.##.#.####......###.#.####.#####...##.#.#.##.#..######..#..#",
    "..##...##.#.##.##.#.#..#....#.##.##.#..###...######.####.#......#..#.#..#.#####.....#.#.#..#......#.",
    "#......#.###.#......###....##.##.#.#...#...##.#.#.######..#.##.####..#..#...#.##.###....#......####.",
    ".#.#.#####.###.##.##......#......##.#.....##..#.###..#.##....##.#.##.#####..##.##..#####.#..#...##.#",
    "##.#.#.#..#.###.##.#.#....##.#.##.....#.#.#.#..#...#.....#.#.#.#.#####....#######.#..#..##..##.###.#",
    "..#.##..####.#.......#....######...####.#.#.###.#...######.#....##.#.##.##.###.#..#...##...##..#....",
    ".#.##.###..###........##.##.####.####.#...#.##....#####.##..####...##.##..#.#.####.#####....##....#.",
    "#.##.#.#.##......#.#####.#.#..###....#...#...#..##..##.#.#.####..###.#.#..######.###.......#..#.####",
    "..##.#.#...##...#.....#......#..##.#.##.###.#.###..#..#.#.####.##.#.####.#.####.#.#..###.##.###..#.#",
    "#........#.#..#.....##..#...##..##..##..#.##..##.#.####..####.#.#.#####..###.#.....#.#....#..#..###.",
    "#..##..#.######.....##..#.##..#..###.####.#.#....#.#.........#####.####..##.####.##..#.#..#..#.###..",
    "##.##..##.####..#.#...#..#..#..##.....##..#...#.###..#.............##.#...###....##.####.#.###..#..#",
    "#..#.#.###..###....#####.#.#.#..#.##.#.##...##..###.##..###....#.###.##..#.#.#.#######.##.#.#.#..#..",
];

#[derive(Copy, Clone, Debug, Eq, PartialEq)]
enum Colour {
    Dark,
    Light,
}

struct Image {
    middle_pixels: Grid<Colour>,
    /// All pixels surrounding [middle_pixels] are of this colour.
    surrounding_colour: Colour,
}

impl Default for Colour {
    fn default() -> Self {
        Colour::Dark
    }
}

impl From<char> for Colour {
    fn from(c: char) -> Self {
        match c {
            '.' => Colour::Dark,
            '#' => Colour::Light,
            _ => panic!("Invalid pixel colour"),
        }
    }
}

impl Image {
    fn from_rows(rows: &[&str]) -> Image {
        let width = rows[0].len();
        let height = rows.len();
        let data = rows.join("").chars().map(Colour::from).collect();

        Image {
            middle_pixels: Grid::new(width, height, data),
            surrounding_colour: Colour::Dark,
        }
    }

    fn get_pixel_colour(&self, c: i32, r: i32) -> Colour {
        if (0..self.middle_pixels.width() as i32).contains(&c)
            && (0..self.middle_pixels.height() as i32).contains(&r)
        {
            self.middle_pixels[GridIndex::new(c as usize, r as usize)]
        } else {
            self.surrounding_colour
        }
    }

    fn get_neighbourhood_value(&self, c: i32, r: i32) -> u16 {
        let neighbourhood_as_bit_string = vec![
            (c - 1, r - 1),
            (c, r - 1),
            (c + 1, r - 1),
            (c - 1, r),
            (c, r),
            (c + 1, r),
            (c - 1, r + 1),
            (c, r + 1),
            (c + 1, r + 1),
        ]
        .into_iter()
        .map(|(c, r)| self.get_pixel_colour(c, r))
        .map(|colour| match colour {
            Colour::Dark => '0',
            Colour::Light => '1',
        })
        .collect::<String>();

        u16::from_str_radix(&neighbourhood_as_bit_string, 2).unwrap()
    }

    fn enhance(&mut self, algorithm: &Vec<char>) {
        let mut new_middle_pixels = Grid::new_default(
            self.middle_pixels.width() + 2,
            self.middle_pixels.height() + 2,
        );
        for new_r in 0..new_middle_pixels.width() {
            for new_c in 0..new_middle_pixels.height() {
                let (r, c) = (new_r as i32 - 1, new_c as i32 - 1);
                let neighbourhood_value = self.get_neighbourhood_value(c, r);
                let new_colour = Colour::from(algorithm[neighbourhood_value as usize]);

                new_middle_pixels[GridIndex::new(new_c as usize, new_r as usize)] = new_colour;
            }
        }

        let new_surrounding_colour = Colour::from(match self.surrounding_colour {
            Colour::Dark => algorithm[usize::from_str_radix("000000000", 2).unwrap()],
            Colour::Light => algorithm[usize::from_str_radix("111111111", 2).unwrap()],
        });

        self.middle_pixels = new_middle_pixels;
        self.surrounding_colour = new_surrounding_colour;
    }

    fn num_lit_pixels(&self) -> usize {
        assert_eq!(self.surrounding_colour, Colour::Dark); // Would be infinity otherwise.

        self.middle_pixels
            .cell_iter()
            .filter(|&&colour| colour == Colour::Light)
            .count()
    }
}

pub fn solution_1() -> String {
    let mut image = Image::from_rows(&INPUT_IMAGE);
    let algorithm = INPUT_ALGORITHM.chars().collect();

    for _ in 0..2 {
        image.enhance(&algorithm);
    }

    image.num_lit_pixels().to_string()
}

pub fn solution_2() -> String {
    let mut image = Image::from_rows(&INPUT_IMAGE);
    let algorithm = INPUT_ALGORITHM.chars().collect();

    for _ in 0..50 {
        image.enhance(&algorithm);
    }

    image.num_lit_pixels().to_string()
}

// DEBUG
//impl Display for Image {
//    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
//        for r in 0..self.middle_pixels.height() {
//            for c in 0..self.middle_pixels.width() {
//                match self.middle_pixels[GridIndex::new(c, r)] {
//                    Colour::Dark => write!(f, " ")?,
//                    Colour::Light => write!(f, "#")?,
//                }
//            }
//            writeln!(f)?;
//        }
//        Ok(())
//    }
//}
